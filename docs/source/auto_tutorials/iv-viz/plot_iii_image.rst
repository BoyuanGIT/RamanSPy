
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/iv-viz/plot_iii_image.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_iv-viz_plot_iii_image.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_iv-viz_plot_iii_image.py:


Visualising imaging data
=============================

`RamanSPy` allows the visualisation of Raman imaging data. Visualising imaging data can be achieved by utilising the
:meth:`ramanspy.plot.image` or :meth:`ramanspy.SpectralImage.plot` method.

.. GENERATED FROM PYTHON SOURCE LINES 10-12

To show how that can be done, in this example, we will use the :ref:`Volumetric cell data` provided in `RamanSPy`. Below, we load
the volumetric data across a cell and select a particular layer from the volume (here, this is the fourth layer).

.. GENERATED FROM PYTHON SOURCE LINES 12-21

.. code-block:: default



    import ramanspy
    dir_ = r'../../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)

    cell_layer = volumes[0].layer(4)  # only selecting the fourth layer of the volume








.. GENERATED FROM PYTHON SOURCE LINES 25-27

Having loaded a :class:`ramanspy.SpectralImage` object, we can directly plot a spectral slice across a specific band of
the image using its :meth:`ramanspy.plot.image` method. Here, this is the 1008 cm :sup: `-1` band.

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    ramanspy.plot.image(cell_layer.band(1008))




.. image-sg:: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_001.png
   :alt: Raman image
   :srcset: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman image'}>



.. GENERATED FROM PYTHON SOURCE LINES 30-31

We can achieve the same behaviour using the :meth:`ramanspy.SpectralImage.plot` method, too.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default

    cell_layer.plot(bands=[1008])





.. image-sg:: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_002.png
   :alt: Raman image
   :srcset: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman image'}>



.. GENERATED FROM PYTHON SOURCE LINES 35-37

As usual, `RamanSPy` provides a broad control over the characteristics of the plot. For instance, we can add more informative
title, axis labels, colorbar label, colour schemes, etc.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    ramanspy.plot.image(cell_layer.band(1008), title="Cell imaged with Raman spectroscopy", cbar_label=f"Peak intensity at 1008cm$^{{{-1}}}$")





.. image-sg:: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_003.png
   :alt: Cell imaged with Raman spectroscopy
   :srcset: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Cell imaged with Raman spectroscopy'}>



.. GENERATED FROM PYTHON SOURCE LINES 41-42

Users can also use `RamanSPy` to save the image to a file.

.. GENERATED FROM PYTHON SOURCE LINES 42-46

.. code-block:: default

    ax = ramanspy.plot.image(cell_layer.band(1008))
    ax.figure.savefig("cell_image.png")





.. image-sg:: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_004.png
   :alt: Raman image
   :srcset: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 47-48

It is also possible to plot several images at the same time. When doing that, separate plots will be produced.

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: default

    cell_layer.plot(bands=[1600, 1008])

    # or ramanspy.plot.image([cell_layer.band(1600), cell_layer.band(1008)])





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_005.png
         :alt: Raman image
         :srcset: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_006.png
         :alt: Raman image
         :srcset: /auto_tutorials/iv-viz/images/sphx_glr_plot_iii_image_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes: title={'center': 'Raman image'}>, <Axes: title={'center': 'Raman image'}>]



.. GENERATED FROM PYTHON SOURCE LINES 54-55

Check the rest of the documentations of the two functions for more information of the available parameters.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.504 seconds)


.. _sphx_glr_download_auto_tutorials_iv-viz_plot_iii_image.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_iii_image.py <plot_iii_image.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_iii_image.ipynb <plot_iii_image.ipynb>`
