
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/vi-analysis/plot_iv_integrative_svm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_vi-analysis_plot_iv_integrative_svm.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_vi-analysis_plot_iv_integrative_svm.py:


Integrative analysis: Support Vector Machine (SVM) classification
===================================================================

In this example, we will showcase `RamanSPy's` integrability by integrating a Support Vector Machine (SVM) machine learning
model for the identification of different bacteria species.

To build the model, we will use the `scikit-learn <https://scikit-learn.org/stable/index.html>`_ Python framework.

The data we will use is the :ref:`Bacteria data`, which is integrated into `RamanSPy`.

.. GENERATED FROM PYTHON SOURCE LINES 13-20

.. code-block:: default

    from sklearn import svm
    from sklearn.metrics import accuracy_score, confusion_matrix
    from sklearn.utils import shuffle
    import seaborn as sns

    import ramanspy








.. GENERATED FROM PYTHON SOURCE LINES 21-22

First, we will use `RamanSPy` to load the validation and testing bacteria datasets.

.. GENERATED FROM PYTHON SOURCE LINES 22-28

.. code-block:: default

    dir_ = r"../../../../data/bacteria_data"

    X_train, y_train = ramanspy.datasets.bacteria("val", folder=dir_)
    X_test, y_test = ramanspy.datasets.bacteria("test", folder=dir_)









.. GENERATED FROM PYTHON SOURCE LINES 29-30

To guide the training, it is important to shuffle the training dataset, which is originally ordered by bacteria species.

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: default

    X_train, y_train = shuffle(X_train.flat.spectral_data, y_train)









.. GENERATED FROM PYTHON SOURCE LINES 34-35

Then, we can simply use `scikit-learn's` implementation of SVMs.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    svc = svm.SVC()  # initialisation









.. GENERATED FROM PYTHON SOURCE LINES 39-40

Training the SVM model on the training dataset.

.. GENERATED FROM PYTHON SOURCE LINES 40-43

.. code-block:: default

    _ = svc.fit(X_train, y_train)









.. GENERATED FROM PYTHON SOURCE LINES 44-45

Testing the trained model on the unseen testing dataset.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: default

    y_pred = svc.predict(X_test.flat.spectral_data)
    print(f"The accuracy of the SVM model is: {accuracy_score(y_pred, y_test)}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The accuracy of the SVM model is: 0.767




.. GENERATED FROM PYTHON SOURCE LINES 50-51

Confusion matrix:

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: default

    cf_matrix = confusion_matrix(y_test, y_pred)
    _ = sns.heatmap(cf_matrix, annot=True)



.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_iv_integrative_svm_001.png
   :alt: plot iv integrative svm
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_iv_integrative_svm_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.119 seconds)


.. _sphx_glr_download_auto_tutorials_vi-analysis_plot_iv_integrative_svm.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_iv_integrative_svm.py <plot_iv_integrative_svm.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_iv_integrative_svm.ipynb <plot_iv_integrative_svm.ipynb>`
