
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/i-classes/plot_iv_volume_container.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_i-classes_plot_iv_volume_container.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_i-classes_plot_iv_volume_container.py:


Storing volumetric data
--------------------------------------

The management of volumetric Raman spectroscopic data in `RamanSPy` is guided through the :class:`ramanspy.SpectralVolume` class.

.. seealso:: As the :class:`ramanspy.SpectralVolume` class extends the :class:`ramanspy.SpectralContainer` class, most of its
             functionality is inherited from this class. Hence, users are advised to first check the documentation of
             the :class:`ramanspy.Spectrum` class and the :ref:`Generic data container` tutorial.

Below, we will inspect some of the main features the :class:`ramanspy.SpectralVolume` class provides on top of those inherited
through the :class:`ramanspy.SpectralContainer` class.

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default

    import numpy as np
    import ramanspy









.. GENERATED FROM PYTHON SOURCE LINES 19-23

We can define a spectrum by providing a relevant 4D intensity data array and the corresponding Raman wavenumber
axis, just as we initialise :class:`ramanspy.SpectralContainer` instances. As an example, we will create a 50x50x10 spectroscopic
volume, each point of which contains a Raman spectrum containing 1500 spectral points.


.. GENERATED FROM PYTHON SOURCE LINES 23-28

.. code-block:: default

    spectral_data = np.random.rand(50, 50, 10, 1500)
    spectral_axis = np.linspace(100, 3600, 1500)

    raman_volume = ramanspy.SpectralVolume(spectral_data, spectral_axis)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Then, we can use all features of the :class:`ramanspy.SpectralContainer` class as usual. For instance,

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    raman_volume.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (50, 50, 10)



.. GENERATED FROM PYTHON SOURCE LINES 33-35

Another way to create :class:`ramanspy.SpectralVolume` instances is by stacking :class:`ramanspy.SpectralImages` instances along
the z-axis. When doing that, the spatial dimensions of the images and their spectral axes must match.

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default

    raman_images = [ramanspy.SpectralImage(np.random.rand(50, 50, 1500), spectral_axis) for _ in range(5)]
    raman_volume = ramanspy.SpectralVolume.from_image_stack(raman_images)








.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    raman_volume.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (50, 50, 5)



.. GENERATED FROM PYTHON SOURCE LINES 42-43

Once we have initialised a :class:`ramanspy.SpectralVolume` instance, we can visualise spectral slices across it

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default

    raman_volume.plot(bands=[1500, 2500])





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/i-classes/images/sphx_glr_plot_iv_volume_container_001.png
         :alt: Raman volume
         :srcset: /auto_tutorials/i-classes/images/sphx_glr_plot_iv_volume_container_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/i-classes/images/sphx_glr_plot_iv_volume_container_002.png
         :alt: Raman volume
         :srcset: /auto_tutorials/i-classes/images/sphx_glr_plot_iv_volume_container_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes3D: title={'center': 'Raman volume'}>, <Axes3D: title={'center': 'Raman volume'}>]



.. GENERATED FROM PYTHON SOURCE LINES 47-48

as well as access individual layers from it and plot them

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default

    raman_image = raman_volume.layer(3)

    raman_image.plot(bands=1500)



.. image-sg:: /auto_tutorials/i-classes/images/sphx_glr_plot_iv_volume_container_003.png
   :alt: Raman image
   :srcset: /auto_tutorials/i-classes/images/sphx_glr_plot_iv_volume_container_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman image'}>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.665 seconds)


.. _sphx_glr_download_auto_tutorials_i-classes_plot_iv_volume_container.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_iv_volume_container.py <plot_iv_volume_container.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_iv_volume_container.ipynb <plot_iv_volume_container.ipynb>`
