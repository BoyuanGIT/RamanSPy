
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/v-preprocessing/plot_iv_predefined_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_v-preprocessing_plot_iv_predefined_pipeline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_v-preprocessing_plot_iv_predefined_pipeline.py:


Built-in protocols
-----------------------------------------------------

To further ease the preprocessing workflow, `RamanSPy` provides a selection of established preprocessing pipelines, which
have proved useful in the literature. Once again, users can directly access and use these out of the box.

Below, we will use `RamanSPy` to apply one of the available preprocessing protocols to the volumetric :ref:`Volumetric cell data` provided in `RamanSPy`.

.. seealso:: For more information on the available protocols, check :ref:`Established protocols`.

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: default



    import ramanspy

    dir_ = r'../../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

We will use the first volume

.. GENERATED FROM PYTHON SOURCE LINES 25-31

.. code-block:: default

    cell_volume = volumes[0]

    # selecting the fourth layer of the volume and visualising it before it gets preprocessed
    cell_layer = cell_volume.layer(4)
    cell_layer.plot(1008, title='Original Raman image')




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iv_predefined_pipeline_001.png
   :alt: Original Raman image
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iv_predefined_pipeline_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Original Raman image'}>



.. GENERATED FROM PYTHON SOURCE LINES 32-34

Instead of manually creating a custom preprocessing pipeline, users can simply access and use some of the established
preprocessing protocols offered within `RamanSPy`. These can be accessed within the `preprocessing.protocols` submodule.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    preprocessing_pipeline = ramanspy.preprocessing.protocols.default_fingerprint()








.. GENERATED FROM PYTHON SOURCE LINES 37-39

And, again, these protocols can be used directly as any :class:`Pipeline` object through their
:meth:`ramanspy.preprocessing.Pipeline.apply` method.

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    preprocessed_cell_layer = preprocessing_pipeline.apply(cell_layer)








.. GENERATED FROM PYTHON SOURCE LINES 42-43

Visualising the preprocessed layer.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default

    preprocessed_cell_layer.plot(1008, title='Preprocessed Raman image')





.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iv_predefined_pipeline_002.png
   :alt: Preprocessed Raman image
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iv_predefined_pipeline_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Preprocessed Raman image'}>



.. GENERATED FROM PYTHON SOURCE LINES 47-48

.. note:: The protocols provided in `RamanSPy` work equally well on the other spectral data containers, as well as on collection of those.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.732 seconds)


.. _sphx_glr_download_auto_tutorials_v-preprocessing_plot_iv_predefined_pipeline.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_iv_predefined_pipeline.py <plot_iv_predefined_pipeline.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_iv_predefined_pipeline.ipynb <plot_iv_predefined_pipeline.ipynb>`
