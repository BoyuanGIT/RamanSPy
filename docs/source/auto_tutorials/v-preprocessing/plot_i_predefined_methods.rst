
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/v-preprocessing/plot_i_predefined_methods.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_v-preprocessing_plot_i_predefined_methods.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_v-preprocessing_plot_i_predefined_methods.py:


Built-in methods
-------------------------------------------

`RamanSPy` provides a collection of various preprocessing methods, which users can directly access and use out of the box.

Below, we will use `RamanSPy` to define and apply a custom preprocessing method to the volumetric :ref:`Volumetric cell data` provided in `RamanSPy`.

.. seealso:: The list of available preprocessing procedures offered by `RamanSPy` can be checked at :ref:`Predefined algorithms`.

.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: default



    import ramanspy

    dir_ = r'../../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)








.. GENERATED FROM PYTHON SOURCE LINES 23-24

We will use the first volume

.. GENERATED FROM PYTHON SOURCE LINES 24-30

.. code-block:: default

    cell_volume = volumes[0]

    # selecting a random spectrum for visualisation purposes
    random_spectrum = cell_volume[25, 25, 5]
    random_spectrum.plot(title='Original Raman spectra')




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_001.png
   :alt: Original Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Original Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 31-34

For instance, we can pergorm spectral cropping. This can be done by accessing the corresponding
method in `RamanSPy` and providing the desired parameters as arguments in the initialisation of the preprocessing step as given below.
To check what parameters may be needed, check the documentation of the selected method.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    cropper = ramanspy.preprocessing.misc.Cropper(region=(300, None))








.. GENERATED FROM PYTHON SOURCE LINES 37-39

Then, users can straightforwardly use the selected algorithm to preprocess different data through its
:meth:`ramanspy.preprocessing.PreprocessingStep.apply` method.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default

    cropped_random_spectrum = cropper.apply(random_spectrum)
    cropped_random_spectrum.plot(title='Cropped Raman spectra')




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_002.png
   :alt: Cropped Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Cropped Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 43-44

We can further apply other preprocessing procedure, such as denoising:

.. GENERATED FROM PYTHON SOURCE LINES 44-49

.. code-block:: default

    savgol = ramanspy.preprocessing.denoise.SavGol(window_length=7, polyorder=3)

    denoised_random_spectrum = savgol.apply(cropped_random_spectrum)
    denoised_random_spectrum.plot(title='Smoothened Raman spectra')




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_003.png
   :alt: Smoothened Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Smoothened Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 50-51

baseline correction:

.. GENERATED FROM PYTHON SOURCE LINES 51-57

.. code-block:: default

    baseline_corrector = ramanspy.preprocessing.baseline.IARPLS()

    baselined_random_spectrum = baseline_corrector.apply(denoised_random_spectrum)
    baselined_random_spectrum.plot(title='Baseline corrected Raman spectra')





.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_004.png
   :alt: Baseline corrected Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Baseline corrected Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 58-59

normalisation:

.. GENERATED FROM PYTHON SOURCE LINES 59-65

.. code-block:: default

    vector_normaliser = ramanspy.preprocessing.normalise.Vector()

    normalised_random_spectrum = vector_normaliser.apply(baselined_random_spectrum)
    normalised_random_spectrum.plot(title='Normalised Raman spectra', ylabel="Normalised intensity (a.u.)")





.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_005.png
   :alt: Normalised Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Normalised Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Normalised intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 66-67

and others.

.. GENERATED FROM PYTHON SOURCE LINES 67-74

.. code-block:: default


    ramanspy.plot.spectra(
        [random_spectrum, cropped_random_spectrum, denoised_random_spectrum, baselined_random_spectrum, normalised_random_spectrum],
        plot_type='stacked',
        label=['Original', 'Cropped', 'Smoothened', 'Baseline corrected', 'Normalised'],
        title='Preprocessing showcase')




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_006.png
   :alt: Preprocessing showcase
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_i_predefined_methods_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Figure size 640x480 with 5 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 75-76

.. note:: The methods provided in `RamanSPy` work equally well on the other spectral data containers, as well as on collection of those.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.578 seconds)


.. _sphx_glr_download_auto_tutorials_v-preprocessing_plot_i_predefined_methods.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_i_predefined_methods.py <plot_i_predefined_methods.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_i_predefined_methods.ipynb <plot_i_predefined_methods.ipynb>`
