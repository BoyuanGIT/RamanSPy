
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/iii-datasets/plot_ii_metrics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_iii-datasets_plot_ii_metrics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_iii-datasets_plot_ii_metrics.py:


Using built-in metrics
--------------------------------------

In this tutorial, we will see how to access and use the built-in metrics available in `RamanSPy`.

.. GENERATED FROM PYTHON SOURCE LINES 7-11

.. code-block:: default

    import numpy as np

    import ramanspy








.. GENERATED FROM PYTHON SOURCE LINES 12-13

To access the built-in metrics, simply use the :mod:`ramanspy.metrics` module.

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Before we make use of the metrics, let us first define some dummy data to work with. We will create two spectra, one
that is a sine wave and another that is a cosine wave. We will then use the metrics to compare the two spectra.

.. GENERATED FROM PYTHON SOURCE LINES 17-25

.. code-block:: default

    spectral_axis = np.linspace(100, 3600, 1500)

    sine_data = np.sin(spectral_axis/120)
    cosine_data = np.cos(spectral_axis/120)

    sine_spectrum = ramanspy.Spectrum(sine_data, spectral_axis)
    cosine_spectrum = ramanspy.Spectrum(cosine_data, spectral_axis)








.. GENERATED FROM PYTHON SOURCE LINES 26-27

We can visualise the two spectra with the data visualisation tools in `RamanSPy`.

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    _ = ramanspy.plot.spectra([sine_spectrum, cosine_spectrum], plot_type="single", label=["Sine", "Cosine"])




.. image-sg:: /auto_tutorials/iii-datasets/images/sphx_glr_plot_ii_metrics_001.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/iii-datasets/images/sphx_glr_plot_ii_metrics_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 30-32

We can then measure the distance or similarity of the two spectra using the built-in metrics. For instance, we can
use the :meth:`ramanspy.metrics.MAE` to measure the mean absolute error between the two spectra.

.. GENERATED FROM PYTHON SOURCE LINES 32-34

.. code-block:: default

    ramanspy.metrics.MAE(sine_spectrum, cosine_spectrum)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.892424



.. GENERATED FROM PYTHON SOURCE LINES 35-36

To double-check that the metric is working as expected, we can also measure the distance between the seme spectrum.

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    ramanspy.metrics.MAE(sine_spectrum, sine_spectrum)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    0.0



.. GENERATED FROM PYTHON SOURCE LINES 39-41

Other metrics that are available include the :meth:`~ramanspy.metrics.MSE`, :meth:`~ramanspy.metrics.RMSE`, :meth:`~ramanspy.metrics.SAD`, :meth:`~ramanspy.metrics.SID`.
For more information about these metrics, refer to their documentation.

.. GENERATED FROM PYTHON SOURCE LINES 43-44

For instance, we can use the :meth:`~ramanspy.metrics.SAD` to measure the spectral angle distance between the two spectra.

.. GENERATED FROM PYTHON SOURCE LINES 44-45

.. code-block:: default

    ramanspy.metrics.SAD(sine_spectrum, cosine_spectrum)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1.5558872986720789




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.051 seconds)


.. _sphx_glr_download_auto_tutorials_iii-datasets_plot_ii_metrics.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_ii_metrics.py <plot_ii_metrics.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_ii_metrics.ipynb <plot_ii_metrics.ipynb>`
