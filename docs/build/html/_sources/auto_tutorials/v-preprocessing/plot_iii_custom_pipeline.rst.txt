
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/v-preprocessing/plot_iii_custom_pipeline.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_v-preprocessing_plot_iii_custom_pipeline.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_v-preprocessing_plot_iii_custom_pipeline.py:


Custom pipelines
-------------------------------------------------

`RamanSPy` makes the construction and execution of diverse preprocessing pipelines significantly easier and less
software intensive. This is possible through the :class:`preprocessing.Pipeline` class.

Below, we will use `RamanSPy` to define and apply a preprocessing pipeline to the volumetric :ref:`Volumetric cell data` provided in `RamanSPy`.

.. GENERATED FROM PYTHON SOURCE LINES 10-18

.. code-block:: default



    import ramanspy

    dir_ = r'../../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)








.. GENERATED FROM PYTHON SOURCE LINES 22-23

We will use the first volume

.. GENERATED FROM PYTHON SOURCE LINES 23-25

.. code-block:: default

    cell_volume = volumes[0]








.. GENERATED FROM PYTHON SOURCE LINES 26-27

selecting the fourth layer of the volume

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    cell_layer = cell_volume.layer(4)









.. GENERATED FROM PYTHON SOURCE LINES 31-32

Let's first plot a spectral slice across the 2930 cm :sup:`-1` band of the image to visualise what has been captured in the image.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    cell_layer.plot(bands=[2930, 1600], title='Original Raman image')





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_001.png
         :alt: Original Raman image
         :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_002.png
         :alt: Original Raman image
         :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes: title={'center': 'Original Raman image'}>, <Axes: title={'center': 'Original Raman image'}>]



.. GENERATED FROM PYTHON SOURCE LINES 36-37

We can also visualise a specific spectrum within the image.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    cell_layer[30, 30].plot(title='Original Raman spectra')





.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_003.png
   :alt: Original Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Original Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 41-44

To create a complete preprocessing pipeline, users need to simply stack the relevant preprocessing algorithms they wish
to perform (in the execution order they wish to adopt) into a :class:`Pipeline` object. This can include both methods
provided by `RamanSPy` and custom methods wrapped within :class:`PreprocessingStep` objects.

.. GENERATED FROM PYTHON SOURCE LINES 44-53

.. code-block:: default

    preprocessing_pipeline = ramanspy.preprocessing.Pipeline([
        ramanspy.preprocessing.misc.Cropper(region=(300, None)),
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.denoise.SavGol(window_length=7, polyorder=3),
        ramanspy.preprocessing.baseline.IARPLS(),
        ramanspy.preprocessing.normalise.MinMax()
    ])









.. GENERATED FROM PYTHON SOURCE LINES 54-56

Then, one can straightforwardly use the pipeline to preprocess different data through its
:meth:`ramanspy.preprocessing.Pipeline.apply` method.

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: default

    preprocessed_cell_layer = preprocessing_pipeline.apply(cell_layer)









.. GENERATED FROM PYTHON SOURCE LINES 60-61

To check the effect of our preprocessing protocol, we can re-plot the same spectral slice as before

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default

    preprocessed_cell_layer.plot(bands=[2930, 1600], title='Preprocessed Raman spectra')





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_004.png
         :alt: Preprocessed Raman spectra
         :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_005.png
         :alt: Preprocessed Raman spectra
         :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_005.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes: title={'center': 'Preprocessed Raman spectra'}>, <Axes: title={'center': 'Preprocessed Raman spectra'}>]



.. GENERATED FROM PYTHON SOURCE LINES 65-66

as well as the same spectra we visualised before.

.. GENERATED FROM PYTHON SOURCE LINES 66-68

.. code-block:: default

    preprocessed_cell_layer[30, 30].plot(title='Preprocessed Raman spectra')




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_006.png
   :alt: Preprocessed Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_iii_custom_pipeline_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Preprocessed Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 69-70

.. note:: Custom preprocessing protocols defined with `RamanSPy` work equally well on the other spectral data containers, as well as on collection of those.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.826 seconds)


.. _sphx_glr_download_auto_tutorials_v-preprocessing_plot_iii_custom_pipeline.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_iii_custom_pipeline.py <plot_iii_custom_pipeline.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_iii_custom_pipeline.ipynb <plot_iii_custom_pipeline.ipynb>`
