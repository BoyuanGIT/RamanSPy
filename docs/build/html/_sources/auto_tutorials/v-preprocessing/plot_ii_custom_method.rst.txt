
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/v-preprocessing/plot_ii_custom_method.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_v-preprocessing_plot_ii_custom_method.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_v-preprocessing_plot_ii_custom_method.py:


Custom methods
--------------------------------------

Users can use `RamanSPy` to also define their own preprocessing methods, which can then be directly integrated into
the preprocessing core of `RamanSPy`. This can be done by wrapping custom preprocessing methods into :class:`ramanspy.preprocessing.PreprocessingStep` instances.

Below, we will use `RamanSPy` to define and apply a custom preprocessing method to the volumetric :ref:`Volumetric cell data` provided in `RamanSPy`.

.. GENERATED FROM PYTHON SOURCE LINES 11-19

.. code-block:: default



    import ramanspy

    dir_ = r'../../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)








.. GENERATED FROM PYTHON SOURCE LINES 23-24

We will use the first volume

.. GENERATED FROM PYTHON SOURCE LINES 24-31

.. code-block:: default

    cell_volume = volumes[0]

    # selecting a random spectrum for visualisation purposes
    random_spectrum = cell_volume[25, 25, 5]
    random_spectrum.plot(title='Original Raman spectra')





.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_ii_custom_method_001.png
   :alt: Original Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_ii_custom_method_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Original Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 32-33

To do so, users can define their own preprocessing methods, which must be of the form given below and return the updated intensity_data and spectral_axis.

.. GENERATED FROM PYTHON SOURCE LINES 33-41

.. code-block:: default

    def func(intensity_data, spectral_axis, **kwargs):
        # Preprocess intensity_data and spectral axis
        updated_intensity_data = ...
        updated_spectral_axis = ...

        return updated_intensity_data, updated_spectral_axis









.. GENERATED FROM PYTHON SOURCE LINES 42-44

For instance, we can define a simple example function, which simply subtracts a given offset from each value in the
intensity_data array as follows:

.. GENERATED FROM PYTHON SOURCE LINES 44-48

.. code-block:: default

    def offset_func(intensity_data, spectral_axis, *, offset):
        return intensity_data - offset, spectral_axis









.. GENERATED FROM PYTHON SOURCE LINES 49-52

Then, one must simply wrap the function of interest using the :class:`ramanspy.preprocessing.PreprocessingStep` class.
That is done by creating a :class:`ramanspy.preprocessing.PreprocessingStep` object by invoking its
:meth:`ramanspy.preprocessing.PreprocessingStep.__init__` method on the function one wants to wrap and the *args, **kwargs needed.

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default

    offsetter = ramanspy.preprocessing.PreprocessingStep(offset_func, offset=500)









.. GENERATED FROM PYTHON SOURCE LINES 56-58

Having done that, the :class:`ramanspy.preprocessing.PreprocessingStep` object can now be used as any of `RamanSPy's`
preprocessing methods through its :meth:`ramanspy.preprocessing.PreprocessingStep.apply` method.

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default

    preprocessed_random_spectrum = offsetter.apply(random_spectrum)
    preprocessed_random_spectrum.plot()




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_ii_custom_method_002.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_ii_custom_method_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 62-63

The custom method can also be directly integrated into pipelines as follows:

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: default

    preprocessing_pipeline = ramanspy.preprocessing.Pipeline([
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.denoise.SavGol(window_length=7, polyorder=3),
        offsetter
    ])
    preprocessed_random_spectrum = preprocessing_pipeline.apply(random_spectrum)








.. GENERATED FROM PYTHON SOURCE LINES 71-72

Visualising the preprocessed spectrum.

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: default

    preprocessed_random_spectrum.plot(title='Preprocessed Raman spectra')




.. image-sg:: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_ii_custom_method_003.png
   :alt: Preprocessed Raman spectra
   :srcset: /auto_tutorials/v-preprocessing/images/sphx_glr_plot_ii_custom_method_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Preprocessed Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 75-76

.. note:: Custom preprocessing methods defined with `RamanSPy` work equally well on the other spectral data containers, as well as on collection of those.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.393 seconds)


.. _sphx_glr_download_auto_tutorials_v-preprocessing_plot_ii_custom_method.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_ii_custom_method.py <plot_ii_custom_method.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_ii_custom_method.ipynb <plot_ii_custom_method.ipynb>`
