
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/i-classes/plot_ii_spectrum_container.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_i-classes_plot_ii_spectrum_container.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_i-classes_plot_ii_spectrum_container.py:


Storing spectra
--------------------------------------

The management of single Raman spectra in `RamanSPy` is guided through the :class:`ramanspy.Spectrum` class.

.. seealso:: As the :class:`ramanspy.Spectrum` class extends the :class:`ramanspy.SpectralContainer` class, most of its
             functionality is inherited from this class. Hence, users are advised to first check the documentation of
             the :class:`ramanspy.Spectrum` class and the :ref:`Generic data container` tutorial.

Below, we will inspect some of the main features the :class:`ramanspy.Spectrum` class provides on top of those inherited
through the :class:`ramanspy.SpectralContainer` class.

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default


    import numpy as np
    import ramanspy








.. GENERATED FROM PYTHON SOURCE LINES 19-21

We can define a spectrum by providing a relevant 1D intensity data array and the corresponding ramanspy wavenumber
axis, just as we initialise :class:`raman.SpectralContainer` instances. As an example, we will create a Raman spectrum containing 1500 spectral points.

.. GENERATED FROM PYTHON SOURCE LINES 21-26

.. code-block:: default

    spectral_axis = np.linspace(100, 3600, 1500)
    spectral_data = np.sin(spectral_axis/120)

    raman_spectrum = ramanspy.Spectrum(spectral_data, spectral_axis)








.. GENERATED FROM PYTHON SOURCE LINES 27-28

Then, we can use all features of the :class:`ramanspy.SpectralContainer` class as usual. For instance,

.. GENERATED FROM PYTHON SOURCE LINES 28-30

.. code-block:: default

    raman_spectrum.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (1,)



.. GENERATED FROM PYTHON SOURCE LINES 31-34

At the moment, the only functionality the :class:`ramanspy.Spectrum` class provides over :class:`ramanspy.SpectralContainer` is
the highly-customisable :meth:`ramanspy.Spectrum.plot`, which can be used to quickly visualise spectral slices across
Raman spectroscopic images.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

.. code-block:: default

    raman_spectrum.plot()




.. image-sg:: /auto_tutorials/i-classes/images/sphx_glr_plot_ii_spectrum_container_001.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/i-classes/images/sphx_glr_plot_ii_spectrum_container_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.058 seconds)


.. _sphx_glr_download_auto_tutorials_i-classes_plot_ii_spectrum_container.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_ii_spectrum_container.py <plot_ii_spectrum_container.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_ii_spectrum_container.ipynb <plot_ii_spectrum_container.ipynb>`
