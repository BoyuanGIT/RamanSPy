
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/i-classes/plot_i_generic_container.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_i-classes_plot_i_generic_container.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_i-classes_plot_i_generic_container.py:


Storing generic data
--------------------------------------

The backbone of `RamanSPy's` data management core is the :class:`ramanspy.SpectralContainer` class. It serves as a generic data container
which defines the main Raman spectroscopic data-related features and functionalities.

The data stored within a :class:`ramanspy.SpectralContainer` instance can be of any dimension, but if you are dealing with single
spectra, imaging and volumetric Raman data, users are advised to use the more specialised :class:`ramanspy.Spectrum`,
:class:`ramanspy.SpectralImage` and :class:`ramanspy.SpectralVolume` classes, which extend the :class:`ramanspy.SpectralContainer` class
and thus inherit all features presented below.

Below, we will see how to define a spectral container, as well as how to use its main features.

.. seealso:: For more information about the :class:`ramanspy.Spectrum`, :class:`ramanspy.SpectralImage` and :class:`ramanspy.SpectralVolume`
             classes, check their documentation and/or the :ref:`Storing spectra`, :ref:`Storing imaging data` and :ref:`Storing volumetric data` tutorials respectively.

.. GENERATED FROM PYTHON SOURCE LINES 18-21

.. code-block:: default

    import numpy as np
    import ramanspy








.. GENERATED FROM PYTHON SOURCE LINES 22-26

Initialisation
""""""""""""""""""
We can define :class:`ramanspy.SpectralContainer` containers of different dimensions by passing the corresponding intensity data
and Raman wavenumber axis. For instance,

.. GENERATED FROM PYTHON SOURCE LINES 26-37

.. code-block:: default


    # an evenly spaced Raman wavenumber axis between 100 and 3000 cm^-1, consisting of 1500 elements.
    spectral_axis = np.linspace(100, 3600, 1500)

    # randomly generating intensity data array of shape (20, 1500)
    spectral_data = np.random.rand(20, 1500)

    # wrapping the data into a SpectralContainer instance
    raman_object = ramanspy.SpectralContainer(spectral_data, spectral_axis)









.. GENERATED FROM PYTHON SOURCE LINES 38-39

This can be any other shape, e.g.:

.. GENERATED FROM PYTHON SOURCE LINES 39-51

.. code-block:: default

    spectral_data = np.random.rand(1500)
    raman_spectrum = ramanspy.SpectralContainer(spectral_data, spectral_axis)

    spectral_data = np.random.rand(20, 20, 1500)
    raman_image = ramanspy.SpectralContainer(spectral_data, spectral_axis)

    spectral_data = np.random.rand(20, 20, 20, 1500)
    raman_volume = ramanspy.SpectralContainer(spectral_data, spectral_axis)

    spectral_data = np.random.rand(20, 20, 20, 20, 1500)
    raman_hypervolume = ramanspy.SpectralContainer(spectral_data, spectral_axis)








.. GENERATED FROM PYTHON SOURCE LINES 52-54

If the spectral axis is in wavelength units (nm) and needs converting to wavenumber (cm :sup:`-1`), we can do that using
the `wavelength_to_wavenumber` method within `ramanspy.utils`.

.. GENERATED FROM PYTHON SOURCE LINES 56-57

We can also create a 2D :class:`ramanspy.SpectralContainer` container by stacking a collection of :class:`ramanspy.Spectrum` instances.

.. GENERATED FROM PYTHON SOURCE LINES 57-63

.. code-block:: default

    raman_spectra = [ramanspy.Spectrum(np.random.rand(1500), spectral_axis) for _ in range(5)]
    raman_spectra_list = ramanspy.SpectralContainer.from_stack(raman_spectra)

    raman_spectra_list.shape






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (5,)



.. GENERATED FROM PYTHON SOURCE LINES 64-67

Features
""""""""""""""
Some of the main features and functionalities of the :class:`ramanspy.SpectralContainer` containers include:

.. GENERATED FROM PYTHON SOURCE LINES 67-71

.. code-block:: default


    # access to its spectral axis
    raman_hypervolume.spectral_axis





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([ 100.     ,  102.33489,  104.66978, ..., 3595.3303 , 3597.665  ,
           3600.     ], dtype=float32)



.. GENERATED FROM PYTHON SOURCE LINES 72-76

.. code-block:: default


    # access to the length of the spectral axis
    raman_hypervolume.spectral_length





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1500



.. GENERATED FROM PYTHON SOURCE LINES 77-81

.. code-block:: default


    # access to the shape of the data encapsulated within the instance
    raman_hypervolume.spectral_data.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (20, 20, 20, 20, 1500)



.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default


    # access to the non-spectral (i.e. spatial) shape of the data encapsulated within the instance
    raman_hypervolume.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (20, 20, 20, 20)



.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. code-block:: default


    # access to spatially collapsed data
    raman_hypervolume.flat.shape





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (160000,)



.. GENERATED FROM PYTHON SOURCE LINES 92-99

.. code-block:: default


    # access to a specific spectral band

    raman_image.band(1500)
    raman_spectrum.band(1500)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array(0.4730316, dtype=float32)



.. GENERATED FROM PYTHON SOURCE LINES 100-103

Indexing
""""""""""""""
Another useful feature of the :class:`ramanspy.SpectralContainer` containers is their extensive spatial indexing capability.

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: default


    print(type(raman_image[10, 10]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'ramanspy.core.Spectrum'>




.. GENERATED FROM PYTHON SOURCE LINES 107-108

So, we can plot such indexed objects just as manually created ones:

.. GENERATED FROM PYTHON SOURCE LINES 108-110

.. code-block:: default

    raman_image[10, 10].plot()




.. image-sg:: /auto_tutorials/i-classes/images/sphx_glr_plot_i_generic_container_001.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/i-classes/images/sphx_glr_plot_i_generic_container_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 111-114

.. code-block:: default


    print(type(raman_image[10]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'ramanspy.core.SpectralContainer'>




.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: default


    print(type(raman_volume[10]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'ramanspy.core.SpectralImage'>




.. GENERATED FROM PYTHON SOURCE LINES 119-122

.. code-block:: default


    print(type(raman_hypervolume[10]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'ramanspy.core.SpectralVolume'>




.. GENERATED FROM PYTHON SOURCE LINES 123-127

.. code-block:: default


    print(type(raman_hypervolume[10, 10]))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'ramanspy.core.SpectralImage'>




.. GENERATED FROM PYTHON SOURCE LINES 128-131

IO
""""""""""""""
:class:`ramanspy.SpectralContainer` containers (and thus subclasses) can also be saved as and loaded from pickle files.

.. GENERATED FROM PYTHON SOURCE LINES 131-138

.. code-block:: default


    # save
    raman_image.save("my_raman_image")

    # load
    raman_image_ = ramanspy.SpectralContainer.load("my_raman_image")
    raman_image_.shape




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (20, 20)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.067 seconds)


.. _sphx_glr_download_auto_tutorials_i-classes_plot_i_generic_container.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_i_generic_container.py <plot_i_generic_container.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_i_generic_container.ipynb <plot_i_generic_container.ipynb>`
