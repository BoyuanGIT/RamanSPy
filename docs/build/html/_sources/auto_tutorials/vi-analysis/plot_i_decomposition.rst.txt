
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/vi-analysis/plot_i_decomposition.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_vi-analysis_plot_i_decomposition.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_vi-analysis_plot_i_decomposition.py:


Built-in decomposition methods
================================

In this example, we will use `RamanSPy` to perform Principal Component Analysis (PCA) to decompose a Raman spectroscopic
image into its constituent components.

To do that, we will use the volumetric :ref:`Volumetric cell data` available in `RamanSPy`. In particular,
we will decompose the fourth layer of the provided volumetric dataset.

.. GENERATED FROM PYTHON SOURCE LINES 11-22

.. code-block:: default



    import ramanspy

    dir_ = r'../../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)

    cell_layer = volumes[0].layer(5)  # only selecting the fourth layer of the volume









.. GENERATED FROM PYTHON SOURCE LINES 26-27

Let's first plot a spectral slice across the 1008 cm :sup:`-1` band of the image to visualise what has been captured in the image.

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    cell_layer.plot(bands=[1008])





.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_001.png
   :alt: Raman image
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman image'}>



.. GENERATED FROM PYTHON SOURCE LINES 31-32

We can also visualise a specific spectrum within the image.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    cell_layer[30, 30].plot()





.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_002.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 36-37

We may need to first preprocess the spectral image to improve the results of our consecutive analysis.

.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: default

    preprocessing_pipeline = ramanspy.preprocessing.Pipeline([
        ramanspy.preprocessing.misc.Cropper(region=(500, 1800)),
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.denoise.SavGol(window_length=7, polyorder=3),
        ramanspy.preprocessing.baseline.ASLS(),
        ramanspy.preprocessing.normalise.MinMax(pixelwise=False),
    ])
    preprocessed_cell_layer = preprocessing_pipeline.apply(cell_layer)









.. GENERATED FROM PYTHON SOURCE LINES 48-49

To check the effect of our preprocessing protocol, we can re-plot the same spectral slice as before

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    preprocessed_cell_layer.plot(bands=[1008])





.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_003.png
   :alt: Raman image
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman image'}>



.. GENERATED FROM PYTHON SOURCE LINES 53-54

as well as the same spectra we visualised before.

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default

    preprocessed_cell_layer[30, 30].plot()





.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_004.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 58-59

We will then perform PCA with 4 components using `RamanSPy`.

.. GENERATED FROM PYTHON SOURCE LINES 59-60

.. code-block:: default

    pca = ramanspy.analysis.decompose.PCA(n_components=4)







.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    projections, components = pca.apply(preprocessed_cell_layer)









.. GENERATED FROM PYTHON SOURCE LINES 66-68

Having derived the PCA components and the corresponding projections, we can use `RamanSPy's` :meth:`ramanspy.plot.spectra`
and :meth:`ramanspy.plot.image` methods to visualise them.

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    ramanspy.plot.spectra(components, preprocessed_cell_layer.spectral_axis, plot_type="single stacked", label=[f"Component {i + 1}" for i in range(len(components))])




.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_005.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 72-73

.. code-block:: default

    ramanspy.plot.image(projections, title=[f"Projection {i + 1}" for i in range(len(projections))])



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_006.png
         :alt: Projection 1
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_007.png
         :alt: Projection 2
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_008.png
         :alt: Projection 3
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_009.png
         :alt: Projection 4
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_i_decomposition_009.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes: title={'center': 'Projection 1'}>, <Axes: title={'center': 'Projection 2'}>, <Axes: title={'center': 'Projection 3'}>, <Axes: title={'center': 'Projection 4'}>]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.049 seconds)


.. _sphx_glr_download_auto_tutorials_vi-analysis_plot_i_decomposition.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_i_decomposition.py <plot_i_decomposition.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_i_decomposition.ipynb <plot_i_decomposition.ipynb>`
