
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/vi-analysis/plot_ii_kmeans.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_tutorials_vi-analysis_plot_ii_kmeans.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_vi-analysis_plot_ii_kmeans.py:


Built-in clustering methods
================================

Below, we will use `RamanSPy's` built-in clustering methods to perform KMeans clustering and cluster a Raman spectroscopic image.

In particular, we will cluster the fourth layer of the volumetric :ref:`Volumetric cell data` provided in `RamanSPy`.

.. GENERATED FROM PYTHON SOURCE LINES 9-20

.. code-block:: default



    import ramanspy

    dir_ = r'../../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)

    cell_layer = volumes[0].layer(5)  # only selecting the fourth layer of the volume









.. GENERATED FROM PYTHON SOURCE LINES 24-25

We will first preprocess the spectral image to improve the results of our consecutive analysis.

.. GENERATED FROM PYTHON SOURCE LINES 25-35

.. code-block:: default

    preprocessing_pipeline = ramanspy.preprocessing.Pipeline([
        ramanspy.preprocessing.misc.Cropper(region=(500, 1800)),
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.denoise.SavGol(window_length=7, polyorder=3),
        ramanspy.preprocessing.baseline.ASLS(),
        ramanspy.preprocessing.normalise.MinMax(pixelwise=False),
    ])
    preprocessed_cell_layer = preprocessing_pipeline.apply(cell_layer)









.. GENERATED FROM PYTHON SOURCE LINES 36-37

To check the effect of our preprocessing protocol, we can re-plot the same spectral slice as before

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: default

    preprocessed_cell_layer.plot(bands=[1008])





.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_001.png
   :alt: Raman image
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman image'}>



.. GENERATED FROM PYTHON SOURCE LINES 41-42

We can then access and use `RamanSPy's` implementation of KMeans clustering with 4 clusters.

.. GENERATED FROM PYTHON SOURCE LINES 42-43

.. code-block:: default

    kmeans = ramanspy.analysis.cluster.KMeans(n_clusters=4)







.. GENERATED FROM PYTHON SOURCE LINES 45-48

.. code-block:: default

    clusters, cluster_centres = kmeans.apply(preprocessed_cell_layer)









.. GENERATED FROM PYTHON SOURCE LINES 49-51

Finally, we can use `RamanSPy's` :meth:`ramanspy.plot.spectra` and :meth:`ramanspy.plot.image` methods to visualise the derived
clusters.

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: default

    ramanspy.plot.spectra(cluster_centres, preprocessed_cell_layer.spectral_axis, plot_type="single stacked", label=[f"Cluster centre {i + 1}" for i in range(len(cluster_centres))])




.. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_002.png
   :alt: Raman spectra
   :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Raman spectra'}, xlabel='Raman shift (cm$^{{{-1}}}$)', ylabel='Intensity (a.u.)'>



.. GENERATED FROM PYTHON SOURCE LINES 55-56

.. code-block:: default

    ramanspy.plot.image(clusters, title=[f"Clusters {i + 1}" for i in range(len(clusters))], cbar=False)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_003.png
         :alt: Clusters 1
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_004.png
         :alt: Clusters 2
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_005.png
         :alt: Clusters 3
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_006.png
         :alt: Clusters 4
         :srcset: /auto_tutorials/vi-analysis/images/sphx_glr_plot_ii_kmeans_006.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes: title={'center': 'Clusters 1'}>, <Axes: title={'center': 'Clusters 2'}>, <Axes: title={'center': 'Clusters 3'}>, <Axes: title={'center': 'Clusters 4'}>]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.398 seconds)


.. _sphx_glr_download_auto_tutorials_vi-analysis_plot_ii_kmeans.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_ii_kmeans.py <plot_ii_kmeans.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_ii_kmeans.ipynb <plot_ii_kmeans.ipynb>`
