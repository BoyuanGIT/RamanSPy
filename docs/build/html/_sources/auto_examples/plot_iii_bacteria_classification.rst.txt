
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_iii_bacteria_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_iii_bacteria_classification.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_iii_bacteria_classification.py:


Bacteria classification
================================

In this example, we will benchmark the performance of a variety of machine learning models on a dataset of Raman spectra of
30 different bacteria species. The dataset is from [1]_.

Prerequisites
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default



    from lazypredict.Supervised import LazyClassifier
    from sklearn.utils import shuffle
    from sklearn.metrics import accuracy_score, confusion_matrix
    import matplotlib.pyplot as plt
    import seaborn as sns
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 24-26

.. code-block:: default

    import ramanspy








.. GENERATED FROM PYTHON SOURCE LINES 27-30

Data loading
---------------------
Load the fine-tuning/validation and testing datasets from the original paper, alongside the corresponding labels.

.. GENERATED FROM PYTHON SOURCE LINES 30-37

.. code-block:: default

    dir_ = r"../../../data/bacteria_data"

    X_train, y_train = ramanspy.datasets.bacteria("val", folder=dir_)
    X_test, y_test = ramanspy.datasets.bacteria("test", folder=dir_)

    y_labels, antibiotics_labels = ramanspy.datasets.bacteria("labels")








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Define the order in which to plot the species throughout the example. The same order as in the original paper.

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    plotting_order = [16, 17, 14, 18, 15, 20, 21, 24, 23, 26, 27, 28, 29, 25, 6, 7, 5, 3, 4, 9, 10, 2, 8, 11, 22, 19, 12, 13, 0, 1]








.. GENERATED FROM PYTHON SOURCE LINES 42-45

Exploratory analysis
---------------------
Group training data into species classes for plotting.

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    spectra = [[X_train[y_train == species_id]] for species_id in list(np.unique(y_train))]
    







.. GENERATED FROM PYTHON SOURCE LINES 48-49

Normalise the spectra using min-max normalisation.

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: default

    spectra_ = ramanspy.preprocessing.normalise.MinMax().apply(spectra)








.. GENERATED FROM PYTHON SOURCE LINES 52-53

Define colormaps (for visualisation purposes).

.. GENERATED FROM PYTHON SOURCE LINES 53-61

.. code-block:: default

    cmap = plt.cm.get_cmap()  # using matplotlib's default colormap
    colors = list(cmap(np.linspace(0, 1, len(list(np.unique(antibiotics_labels))))))

    # defining the color map for the different antibiotic groups
    antibiotics_map_ = [antibiotics_labels[i] for i in plotting_order]
    antibiotic_color_map = {a: c for a, c in zip(list(np.unique(antibiotics_map_)), colors)}
    antibiotics_colors = [antibiotic_color_map[a] for a in antibiotics_map_]








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Plot the mean spectra of each species (data from finetuning dataset).

.. GENERATED FROM PYTHON SOURCE LINES 63-66

.. code-block:: default

    plt.figure(figsize=(8, 9))
    _ = ramanspy.plot.mean_spectra([spectra_[i] for i in plotting_order], label=[y_labels[i] for i in plotting_order], plot_type="single stacked", color=antibiotics_colors, title=None)




.. image-sg:: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_001.png
   :alt: plot iii bacteria classification
   :srcset: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-71

Benchmarking
------------------
Next, we will benchmark a variety of machine learning models on task of predicting the bacteria species class each
spectrum belongs to. We will train the models on the validation/fine-tuning dataset and test them on the testing dataset.

.. GENERATED FROM PYTHON SOURCE LINES 73-74

To guide the training, it is important to shuffle the training dataset, which is originally ordered by bacteria species.

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: default

    X_train, y_train = shuffle(X_train.flat.spectral_data, y_train)








.. GENERATED FROM PYTHON SOURCE LINES 77-78

We can use `the lazypredict Python package <https://lazypredict.readthedocs.io/en/latest/>`_ to benchmark the performance of a variety of machine learning models.

.. GENERATED FROM PYTHON SOURCE LINES 78-81

.. code-block:: default

    clf = LazyClassifier()
    models_test, predictions_test = clf.fit(X_train, X_test.spectral_data, y_train, y_test)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/29 [00:00<?, ?it/s]      3%|3         | 1/29 [00:14<06:51, 14.69s/it]      7%|6         | 2/29 [00:35<08:10, 18.17s/it]     10%|#         | 3/29 [00:35<04:18,  9.93s/it]     14%|#3        | 4/29 [03:15<28:53, 69.34s/it]     21%|##        | 6/29 [03:19<12:49, 33.45s/it]     28%|##7       | 8/29 [03:19<06:40, 19.06s/it]     31%|###1      | 9/29 [03:20<04:56, 14.85s/it]     34%|###4      | 10/29 [03:20<03:32, 11.17s/it]     38%|###7      | 11/29 [03:21<02:29,  8.32s/it]     41%|####1     | 12/29 [03:21<01:46,  6.24s/it]     45%|####4     | 13/29 [03:22<01:14,  4.66s/it]     48%|####8     | 14/29 [03:24<00:58,  3.90s/it]     52%|#####1    | 15/29 [03:58<02:55, 12.56s/it]     55%|#####5    | 16/29 [03:59<02:02,  9.42s/it]     62%|######2   | 18/29 [04:12<01:27,  7.97s/it]     66%|######5   | 19/29 [04:15<01:06,  6.68s/it]     69%|######8   | 20/29 [04:16<00:47,  5.32s/it]     72%|#######2  | 21/29 [04:17<00:32,  4.11s/it]     76%|#######5  | 22/29 [04:23<00:32,  4.70s/it]     79%|#######9  | 23/29 [04:24<00:21,  3.52s/it]     83%|########2 | 24/29 [04:25<00:14,  2.85s/it]     86%|########6 | 25/29 [04:27<00:10,  2.54s/it]     90%|########9 | 26/29 [04:37<00:14,  4.92s/it]     97%|#########6| 28/29 [05:26<00:13, 13.79s/it]    100%|##########| 29/29 [05:55<00:00, 17.49s/it]    100%|##########| 29/29 [05:55<00:00, 12.25s/it]




.. GENERATED FROM PYTHON SOURCE LINES 82-83

Print the benchmarking results.

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: default

    models_test






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Accuracy</th>
          <th>Balanced Accuracy</th>
          <th>ROC AUC</th>
          <th>F1 Score</th>
          <th>Time Taken</th>
        </tr>
        <tr>
          <th>Model</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>LogisticRegression</th>
          <td>0.80</td>
          <td>0.80</td>
          <td>None</td>
          <td>0.79</td>
          <td>1.87</td>
        </tr>
        <tr>
          <th>SVC</th>
          <td>0.76</td>
          <td>0.76</td>
          <td>None</td>
          <td>0.75</td>
          <td>10.64</td>
        </tr>
        <tr>
          <th>NuSVC</th>
          <td>0.75</td>
          <td>0.75</td>
          <td>None</td>
          <td>0.75</td>
          <td>12.39</td>
        </tr>
        <tr>
          <th>SGDClassifier</th>
          <td>0.75</td>
          <td>0.75</td>
          <td>None</td>
          <td>0.74</td>
          <td>1.77</td>
        </tr>
        <tr>
          <th>LinearDiscriminantAnalysis</th>
          <td>0.73</td>
          <td>0.73</td>
          <td>None</td>
          <td>0.72</td>
          <td>1.99</td>
        </tr>
        <tr>
          <th>PassiveAggressiveClassifier</th>
          <td>0.64</td>
          <td>0.64</td>
          <td>None</td>
          <td>0.63</td>
          <td>2.72</td>
        </tr>
        <tr>
          <th>CalibratedClassifierCV</th>
          <td>0.64</td>
          <td>0.64</td>
          <td>None</td>
          <td>0.63</td>
          <td>160.40</td>
        </tr>
        <tr>
          <th>RidgeClassifierCV</th>
          <td>0.61</td>
          <td>0.61</td>
          <td>None</td>
          <td>0.59</td>
          <td>1.22</td>
        </tr>
        <tr>
          <th>RidgeClassifier</th>
          <td>0.61</td>
          <td>0.61</td>
          <td>None</td>
          <td>0.59</td>
          <td>0.53</td>
        </tr>
        <tr>
          <th>LGBMClassifier</th>
          <td>0.61</td>
          <td>0.61</td>
          <td>None</td>
          <td>0.59</td>
          <td>28.81</td>
        </tr>
        <tr>
          <th>LinearSVC</th>
          <td>0.60</td>
          <td>0.60</td>
          <td>None</td>
          <td>0.59</td>
          <td>33.69</td>
        </tr>
        <tr>
          <th>Perceptron</th>
          <td>0.58</td>
          <td>0.59</td>
          <td>None</td>
          <td>0.57</td>
          <td>1.45</td>
        </tr>
        <tr>
          <th>XGBClassifier</th>
          <td>0.57</td>
          <td>0.57</td>
          <td>None</td>
          <td>0.56</td>
          <td>48.66</td>
        </tr>
        <tr>
          <th>GaussianNB</th>
          <td>0.56</td>
          <td>0.56</td>
          <td>None</td>
          <td>0.56</td>
          <td>0.25</td>
        </tr>
        <tr>
          <th>NearestCentroid</th>
          <td>0.55</td>
          <td>0.55</td>
          <td>None</td>
          <td>0.55</td>
          <td>0.09</td>
        </tr>
        <tr>
          <th>BernoulliNB</th>
          <td>0.54</td>
          <td>0.54</td>
          <td>None</td>
          <td>0.54</td>
          <td>0.14</td>
        </tr>
        <tr>
          <th>RandomForestClassifier</th>
          <td>0.51</td>
          <td>0.51</td>
          <td>None</td>
          <td>0.50</td>
          <td>6.24</td>
        </tr>
        <tr>
          <th>ExtraTreesClassifier</th>
          <td>0.49</td>
          <td>0.49</td>
          <td>None</td>
          <td>0.48</td>
          <td>1.14</td>
        </tr>
        <tr>
          <th>BaggingClassifier</th>
          <td>0.38</td>
          <td>0.38</td>
          <td>None</td>
          <td>0.37</td>
          <td>20.60</td>
        </tr>
        <tr>
          <th>KNeighborsClassifier</th>
          <td>0.33</td>
          <td>0.33</td>
          <td>None</td>
          <td>0.27</td>
          <td>0.38</td>
        </tr>
        <tr>
          <th>DecisionTreeClassifier</th>
          <td>0.27</td>
          <td>0.27</td>
          <td>None</td>
          <td>0.27</td>
          <td>3.23</td>
        </tr>
        <tr>
          <th>ExtraTreeClassifier</th>
          <td>0.22</td>
          <td>0.22</td>
          <td>None</td>
          <td>0.22</td>
          <td>0.07</td>
        </tr>
        <tr>
          <th>AdaBoostClassifier</th>
          <td>0.10</td>
          <td>0.10</td>
          <td>None</td>
          <td>0.05</td>
          <td>14.69</td>
        </tr>
        <tr>
          <th>QuadraticDiscriminantAnalysis</th>
          <td>0.05</td>
          <td>0.05</td>
          <td>None</td>
          <td>0.04</td>
          <td>0.85</td>
        </tr>
        <tr>
          <th>LabelSpreading</th>
          <td>0.03</td>
          <td>0.03</td>
          <td>None</td>
          <td>0.00</td>
          <td>0.64</td>
        </tr>
        <tr>
          <th>LabelPropagation</th>
          <td>0.03</td>
          <td>0.03</td>
          <td>None</td>
          <td>0.00</td>
          <td>0.73</td>
        </tr>
        <tr>
          <th>DummyClassifier</th>
          <td>0.03</td>
          <td>0.03</td>
          <td>None</td>
          <td>0.00</td>
          <td>0.05</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 86-87

Plot the benchmarking results in a bar chart.

.. GENERATED FROM PYTHON SOURCE LINES 87-95

.. code-block:: default

    sns.set_theme(style='whitegrid')
    plt.figure(figsize=(5, 10))
    models_test['Accuracy (%)'] = models_test['Accuracy']*100
    ax = sns.barplot(y=models_test.index, x='Accuracy (%)', data=models_test)
    for i in ax.containers:
        ax.bar_label(i, fmt='%.2f')





.. image-sg:: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_002.png
   :alt: plot iii bacteria classification
   :srcset: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 96-97

Get the best performing model.

.. GENERATED FROM PYTHON SOURCE LINES 97-100

.. code-block:: default

    best_model = models_test.index[0]
    print(f"The best performing model is: {best_model}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The best performing model is: LogisticRegression




.. GENERATED FROM PYTHON SOURCE LINES 101-106

Logistic regression modelling
----------------------------------
As the benchmarking results show, the Logistic Regression model performs the best. We thus select this model for the
consecutive analyses where we analyse the model's performance in more detail for the task of predicting the bacteria
species class each spectrum belongs to, as well as the task of predicting the antibiotic class each spectrum belongs to.

.. GENERATED FROM PYTHON SOURCE LINES 106-112

.. code-block:: default


    from sklearn.linear_model import LogisticRegression

    # Then, we can simply use `scikit-learn's` implementation of logistic regression.
    model = LogisticRegression()








.. GENERATED FROM PYTHON SOURCE LINES 113-114

Normalise the data

.. GENERATED FROM PYTHON SOURCE LINES 114-120

.. code-block:: default

    from sklearn.preprocessing import StandardScaler

    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test.flat.spectral_data)








.. GENERATED FROM PYTHON SOURCE LINES 121-122

Training the logistic regression model on the training dataset.

.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: default

    _ = model.fit(X_train, y_train)








.. GENERATED FROM PYTHON SOURCE LINES 125-127

Species-level classification
'''''''''''''''''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 129-130

Testing the trained model on the unseen testing dataset.

.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: default

    y_pred = model.predict(X_test)
    print(f"The accuracy of the Logistic Regression model is: {accuracy_score(y_pred, y_test)}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The accuracy of the Logistic Regression model is: 0.7963333333333333




.. GENERATED FROM PYTHON SOURCE LINES 135-136

Plot the confusion matrix.

.. GENERATED FROM PYTHON SOURCE LINES 136-179

.. code-block:: default

    sns.set_context("talk")

    label_order = [y_labels[i] for i in plotting_order]
    cm = confusion_matrix(y_test, y_pred, labels=plotting_order)
    cm = 100 * cm / cm.sum(axis=1)[:, np.newaxis]

    plt.figure(figsize=(20, 18))
    ax = sns.heatmap(cm, annot=True, cmap='YlGnBu', fmt='0.0f',
                     xticklabels=label_order, yticklabels=label_order, cbar=False)
    ax.xaxis.tick_top()

    # color the antibiotic groups differently
    for i, tick_label in enumerate(ax.get_yticklabels()):
        tick_label.set_color(antibiotics_colors[i])

    for i, tick_label in enumerate(ax.get_xticklabels()):
        tick_label.set_color(antibiotics_colors[i])

    # add lines separating the antibiotic groups
    linewidth = 1.5
    color = 'gray'
    linestyle = '--'
    alpha = 0.25

    ax.axvline(7, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axvline(9, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axvline(16, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axvline(17, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axvline(25, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axvline(26, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axvline(28, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)

    ax.axhline(7, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axhline(9, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axhline(16, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axhline(17, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axhline(25, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axhline(26, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)
    ax.axhline(28, 0, 2, linewidth=linewidth, c=color, linestyle=linestyle, alpha=alpha)

    plt.xticks(rotation=90)

    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_003.png
   :alt: plot iii bacteria classification
   :srcset: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 183-185

Antibiotic-level classification
'''''''''''''''''''''''''''''''

.. GENERATED FROM PYTHON SOURCE LINES 187-188

Calculate the antibiotic-level accuracy.

.. GENERATED FROM PYTHON SOURCE LINES 188-193

.. code-block:: default

    y_ab = np.asarray([antibiotics_labels[i] for i in y_test])
    y_ab_hat = np.asarray([antibiotics_labels[i] for i in y_pred])

    print(f"The accuracy of the Logistic Regression model is: {accuracy_score(y_ab, y_ab_hat)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The accuracy of the Logistic Regression model is: 0.9463333333333334




.. GENERATED FROM PYTHON SOURCE LINES 194-195

Plot the confusion matrix.

.. GENERATED FROM PYTHON SOURCE LINES 195-215

.. code-block:: default

    label_order = ['Vancomycin', 'Ceftriaxone', 'Penicillin', 'Daptomycin', 'Meropenem', 'Ciprofloxacin', 'TZP', 'Caspofungin']

    cm = confusion_matrix(y_ab, y_ab_hat, labels=label_order)

    plt.figure(figsize=(16, 14))
    cm = 100 * cm / cm.sum(axis=1)[:,np.newaxis]
    ax = sns.heatmap(cm, annot=True, cmap='YlGnBu', fmt='0.0f',
                     xticklabels=label_order, yticklabels=label_order, cbar=False)
    ax.xaxis.tick_top()

    for tick_label in ax.get_yticklabels():
        tick_label.set_color(antibiotic_color_map[tick_label.get_text()])

    for tick_label in ax.get_xticklabels():
        tick_label.set_color(antibiotic_color_map[tick_label.get_text()])

    plt.xticks(rotation=90)
    plt.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_004.png
   :alt: plot iii bacteria classification
   :srcset: /auto_examples/images/sphx_glr_plot_iii_bacteria_classification_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 216-219

References
----------
.. [1] Ho, CS., Jean, N., Hogan, C.A. et al. Rapid identification of pathogenic bacteria using Raman spectroscopy and deep learning. Nat Commun 10, 4927 (2019).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  58.753 seconds)


.. _sphx_glr_download_auto_examples_plot_iii_bacteria_classification.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_iii_bacteria_classification.py <plot_iii_bacteria_classification.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_iii_bacteria_classification.ipynb <plot_iii_bacteria_classification.ipynb>`
