
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_i_preprocessing_pipelines.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_i_preprocessing_pipelines.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_i_preprocessing_pipelines.py:


Preprocessing pipelines
================================

In this example, we will see how easy it is to construct, customise and reuse preprocessing protocols with `RamanSPy`.

Data used is from [1]_.

Prerequisites
-------------

.. GENERATED FROM PYTHON SOURCE LINES 12-21

.. code-block:: default




    import matplotlib.pyplot as plt
    import random
    import numpy as np

    import ramanspy








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Set random seed for reproducibility

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: default

    random.seed(42)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Define color palette.

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    colors = plt.cm.get_cmap()(np.linspace(0, 1, 4))








.. GENERATED FROM PYTHON SOURCE LINES 33-36

Data loading
---------------------
Loading the data.

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default

    thp1_volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=r'../../../data/kallepitis_data')

    # selecting the first volume
    thp1_volume = thp1_volumes[0]








.. GENERATED FROM PYTHON SOURCE LINES 42-43

Grab 2 random spectra from the volume

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default

    random_spectra_indices = random.sample(range(thp1_volume.flat.shape[0]), 2)
    random_spectra = list(thp1_volume.flat[random_spectra_indices])








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Plot the raw spectra

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    _ = ramanspy.plot.spectra(random_spectra, color=colors[1], plot_type='separate')




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_001.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_002.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_002.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 51-52

Plot the fingerprint region

.. GENERATED FROM PYTHON SOURCE LINES 52-56

.. code-block:: default

    cropper = ramanspy.preprocessing.misc.Cropper(region=(700, 1800))
    fingerprint_region = cropper.apply(random_spectra)
    _ = ramanspy.plot.spectra(fingerprint_region, color=colors[1], plot_type='separate')




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_003.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_004.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_004.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 57-60

Pipelines
-------------
Below, we will investigate a series of preprocessing pipelines and their effect on the spectra.

.. GENERATED FROM PYTHON SOURCE LINES 62-71

Pipeline I
''''''''''''''
Applying a preprocessing protocol which consists of:

    - spectral cropping to the fingerprint region (700-1800 cm-1);
    - cosmic ray removal with Whitaker-Hayes algorithm;
    - denoising with a Gaussian filter;
    - baseline correction with Asymmetric Least Squares;
    - Area under the curve normalisation (pixelwise).

.. GENERATED FROM PYTHON SOURCE LINES 73-74

Define the pipeline

.. GENERATED FROM PYTHON SOURCE LINES 74-89

.. code-block:: default

    pipe = ramanspy.preprocessing.Pipeline([
        cropper,
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.denoise.Gaussian(),
        ramanspy.preprocessing.baseline.ASLS(),
        ramanspy.preprocessing.normalise.AUC(pixelwise=True),
    ])

    # preprocess the spectra
    preprocessed_spectra = pipe.apply(random_spectra)

    # plot the results
    _ = ramanspy.plot.spectra(preprocessed_spectra, color=colors[3], plot_type='separate')





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_005.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_006.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 90-99

Pipeline II
''''''''''''''
Applying a preprocessing protocol which consists of:

    - spectral cropping to the fingerprint region (700-1800 cm-1);
    - cosmic ray removal with Whitaker-Hayes algorithm;
    - denoising with Savitzky-Golay filter with window length 9 and polynomial order 3;
    - baseline correction with Adaptive Smoothness Penalized Least Squares (asPLS);
    - MinMax normalisation (pixelwise).

.. GENERATED FROM PYTHON SOURCE LINES 99-114

.. code-block:: default


    # preprocess the spectra
    pipe = ramanspy.preprocessing.protocols.Pipeline([
        cropper,
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.denoise.SavGol(window_length=9, polyorder=3),
        ramanspy.preprocessing.baseline.ASPLS(),
        ramanspy.preprocessing.normalise.MinMax(pixelwise=True),
    ])
    preprocessed_spectra = pipe.apply(random_spectra)

    # plot the results
    _ = ramanspy.plot.spectra(preprocessed_spectra, color=colors[0], plot_type='separate')





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_007.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_008.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_008.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 115-123

Pipeline III
''''''''''''''
Applying a preprocessing protocol inspired from [2]_ which consists of:

    - spectral cropping to the fingerprint region (700-1800 cm-1);
    - cosmic ray removal with Whitaker-Hayes algorithm.
    - baseline correction with polynomial fitting of order 2;
    - (Unit) Vector normalisation (pixelwise).

.. GENERATED FROM PYTHON SOURCE LINES 123-136

.. code-block:: default


    # preprocess the spectra
    pipe = ramanspy.preprocessing.Pipeline([
        cropper,
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.baseline.Poly(poly_order=3),
        ramanspy.preprocessing.normalise.Vector(pixelwise=True)
    ])
    preprocessed_spectra = pipe.apply(random_spectra)

    # plot the results
    _ = ramanspy.plot.spectra(preprocessed_spectra, color=colors[2], plot_type='separate')




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_009.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_010.png
         :alt: Raman spectra
         :srcset: /auto_examples/images/sphx_glr_plot_i_preprocessing_pipelines_010.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 137-142

References
----------
.. [1] Kallepitis, C., Bergholt, M., Mazo, M. et al. Quantitative volumetric Raman imaging of three dimensional cell cultures. Nat Commun 8, 14843 (2017).

.. [2] Bergholt MS, St-Pierre JP, Offeddu GS, Parmar PA, Albro MB, Puetzer JL, Oyen ML, Stevens MM. Raman spectroscopy reveals new insights into the zonal organization of native and tissue-engineered articular cartilage. ACS central science. 2016 Dec 28;2(12):885-95.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.894 seconds)


.. _sphx_glr_download_auto_examples_plot_i_preprocessing_pipelines.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_i_preprocessing_pipelines.py <plot_i_preprocessing_pipelines.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_i_preprocessing_pipelines.ipynb <plot_i_preprocessing_pipelines.ipynb>`
