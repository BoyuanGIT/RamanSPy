
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_i_package_overview.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_i_package_overview.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_i_package_overview.py:


Cell phenotyping
================================

Hyperspectral unmixing of Raman spectroscopic data to analyse the biomolecular composition of cells. Data from [1]_.

Prerequisites
-------------

.. GENERATED FROM PYTHON SOURCE LINES 10-18

.. code-block:: default



    import ramanspy
    import numpy as np
    from matplotlib.colors import LinearSegmentedColormap
    import matplotlib.pyplot as plt
    import random








.. GENERATED FROM PYTHON SOURCE LINES 22-23

Set random seed for reproducibility

.. GENERATED FROM PYTHON SOURCE LINES 23-25

.. code-block:: default

    random.seed(12345)








.. GENERATED FROM PYTHON SOURCE LINES 26-29

Data loading
---------------------
We load the data corresponding to THP-1 cells from [1]_ and select the first cell volume.

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: default

    dir_ = r'../../../data/kallepitis_data'

    volumes = ramanspy.datasets.volumetric_cells(cell_type='THP-1', folder=dir_)

    # select the first volume
    volume = volumes[0]








.. GENERATED FROM PYTHON SOURCE LINES 37-40

Preprocessing
---------------------
We define a preprocessing pipeline to apply to the volume.

.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: default

    preprocessing_pipeline = ramanspy.preprocessing.Pipeline([
        ramanspy.preprocessing.misc.Cropper(region=(700, 1800)),
        ramanspy.preprocessing.despike.WhitakerHayes(),
        ramanspy.preprocessing.denoise.SavGol(window_length=7, polyorder=3),
        ramanspy.preprocessing.baseline.ASLS(),
        ramanspy.preprocessing.normalise.MinMax(pixelwise=False),
    ])

    preprocessed_volume = preprocessing_pipeline.apply(volume)








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Visualising the effect of plotting.

.. GENERATED FROM PYTHON SOURCE LINES 52-60

.. code-block:: default

    selected_image_layer = 5
    selected_spectrum_index = (15, 25, selected_image_layer)

    bands = [789, 1008, 1303]
    band_components = ['DNA', 'Protein', 'Lipids']

    labels = [f'{comp}\n{band} cm$^{{{-1}}}$' for band, comp in zip(bands, band_components)]








.. GENERATED FROM PYTHON SOURCE LINES 61-62

Data before preprocessing.

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    ax = ramanspy.plot.spectra(volume[selected_spectrum_index])





.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_001.png
   :alt: Raman spectra
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-67

Data before preprocessing with fingerprint region highlighted.

.. GENERATED FROM PYTHON SOURCE LINES 67-77

.. code-block:: default

    plt.subplots(figsize=(4, 3))
    ax = ramanspy.plot.spectra(volume[selected_spectrum_index], title="Raw spectrum")
    ax.axvspan(700, 1800, alpha=0.25, color='red', zorder=0)

    ax.axvline(700, linestyle='--', c='red', zorder=0)
    ax.text(730, .95, 700, transform=ax.get_xaxis_transform())
    ax.axvline(1800, linestyle='--', c='red', zorder=0)
    ax.text(1460, .95, 1800, transform=ax.get_xaxis_transform())
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_002.png
   :alt: Raw spectrum
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

The raw data from the fingerprint region.

.. GENERATED FROM PYTHON SOURCE LINES 79-83

.. code-block:: default

    cropped = ramanspy.preprocessing.misc.Cropper(region=(700, 1800)).apply(volume[selected_spectrum_index])

    ax = ramanspy.plot.spectra(cropped, title="Raw spectrum (zoomed in)")




.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_003.png
   :alt: Raw spectrum (zoomed in)
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-85

Fingerprint region data after preprocessing.

.. GENERATED FROM PYTHON SOURCE LINES 85-87

.. code-block:: default

    ax = ramanspy.plot.spectra(preprocessed_volume[selected_spectrum_index], title="Preprocessed spectrum", ylabel="Normalised intensity")




.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_004.png
   :alt: Preprocessed spectrum
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 88-89

Plotting spectral slices across relevant bands corresponding to biomolecular components, such as DNA, protein and lipids.

.. GENERATED FROM PYTHON SOURCE LINES 89-90

.. code-block:: default

    axs = ramanspy.plot.volume([preprocessed_volume.band(band) for band in bands], title=labels)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_005.png
         :alt: DNA 789 cm$^{-1}$
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_006.png
         :alt: Protein 1008 cm$^{-1}$
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_007.png
         :alt: Lipids 1303 cm$^{-1}$
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_007.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 91-92

.. code-block:: default

    ax = ramanspy.plot.volume(preprocessed_volume.band(bands[1]), title=labels[1])



.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_008.png
   :alt: Protein 1008 cm$^{-1}$
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-94

.. code-block:: default

    ramanspy.plot.image([preprocessed_volume.layer(selected_image_layer).band(band) for band in bands], title=labels)



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_009.png
         :alt: DNA 789 cm$^{-1}$
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_010.png
         :alt: Protein 1008 cm$^{-1}$
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_011.png
         :alt: Lipids 1303 cm$^{-1}$
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_011.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    [<Axes: title={'center': 'DNA\n789 cm$^{-1}$'}>, <Axes: title={'center': 'Protein\n1008 cm$^{-1}$'}>, <Axes: title={'center': 'Lipids\n1303 cm$^{-1}$'}>]



.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: default

    ax = ramanspy.plot.image(preprocessed_volume.layer(selected_image_layer).band(bands[1]), title=labels[1])




.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_012.png
   :alt: Protein 1008 cm$^{-1}$
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-101

Spectral unmixing
---------------------
We use the N-FINDR [2]_ algorithm to unmix the volume into endmembers and FCLS [3]_ to derive the corresponding abundance maps.

.. GENERATED FROM PYTHON SOURCE LINES 101-102

.. code-block:: default

    nfindr_unmixer = ramanspy.analysis.unmix.NFINDR(n_endmembers=5)







.. GENERATED FROM PYTHON SOURCE LINES 103-104

.. code-block:: default

    abundance_maps, endmembers = nfindr_unmixer.apply(preprocessed_volume)







.. GENERATED FROM PYTHON SOURCE LINES 107-110

Plotting results
---------------------
Plotting the derived endmembers.

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: default

    ax = ramanspy.plot.spectra(endmembers, wavenumber_axis=preprocessed_volume.spectral_axis, plot_type='single stacked')





.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_013.png
   :alt: Raman spectra
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_013.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 114-116

Plotting a selection of endmembers that are representative of the different biomolecular components with relevant
peaks used to identify the components highlighted.

.. GENERATED FROM PYTHON SOURCE LINES 116-121

.. code-block:: default

    selected_indices = [0, 1, 3, 4]
    labels_ = ['Lipids', 'Nucleus', 'Cytoplasm', 'Background']

    selected_endmembers = [endmembers[i] for i in selected_indices]
    selected_abundances = [abundance_maps[i] for i in selected_indices]







.. GENERATED FROM PYTHON SOURCE LINES 122-151

.. code-block:: default


    plt.figure(figsize=(10, 5))

    ax = ramanspy.plot.spectra(selected_endmembers, wavenumber_axis=preprocessed_volume.spectral_axis, plot_type='single stacked', label=labels_, title='Endmembers')

    peaks = [789, 1008, 1066, 1134, 1303, 1443, 1747]

    ax.axvline(789, linestyle='--', c='black', zorder=0)
    ax.text(725, .95, 789, transform=ax.get_xaxis_transform())

    ax.axvline(1008, linestyle='--', c='black', zorder=0)
    ax.text(930, .9, 1008, transform=ax.get_xaxis_transform())

    ax.axvline(1066, linestyle='--', c='black', zorder=0)
    ax.text(1027, .95, 1066, transform=ax.get_xaxis_transform())

    ax.axvline(1134, linestyle='--', c='black', zorder=0)
    ax.text(1145, .9, 1134, transform=ax.get_xaxis_transform())

    ax.axvline(1303, linestyle='--', c='black', zorder=0)
    ax.text(1310, .95, 1303, transform=ax.get_xaxis_transform())

    ax.axvline(1443, linestyle='--', c='black', zorder=0)
    ax.text(1450, .95, 1443, transform=ax.get_xaxis_transform())

    ax.axvline(1747, linestyle='--', c='black', zorder=0)
    ax.text(1660, .95, 1747, transform=ax.get_xaxis_transform())
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_014.png
   :alt: Endmembers
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_014.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 152-153

Plotting the abundance maps corresponding to the selected endmembers.

.. GENERATED FROM PYTHON SOURCE LINES 153-155

.. code-block:: default

    axs = ramanspy.plot.volume(selected_abundances, title=labels_, cbar=False)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_015.png
         :alt: Lipids
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_016.png
         :alt: Nucleus
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_016.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_017.png
         :alt: Cytoplasm
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_017.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_018.png
         :alt: Background
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_018.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 156-158

.. code-block:: default

    axs = ramanspy.plot.image([abundance_map[..., selected_image_layer] for abundance_map in selected_abundances], title=labels_, cbar=False)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_019.png
         :alt: Lipids
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_019.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_020.png
         :alt: Nucleus
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_020.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_021.png
         :alt: Cytoplasm
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_021.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_022.png
         :alt: Background
         :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_022.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 159-160

Plotting a merged reconstruction of the selected image slice by plotting the abundance maps in one plot.

.. GENERATED FROM PYTHON SOURCE LINES 160-176

.. code-block:: default

    fig, ax = plt.subplots()

    cmap = plt.cm.get_cmap()(np.linspace(0, 1, len(selected_abundances)))

    white = [1, 1, 1, 0]

    order = ['Background', 'Cytoplasm', 'Nucleus', 'Lipids']
    for label in order:
        i = labels_.index(label)
        ax.imshow(selected_abundances[i][..., selected_image_layer], cmap=LinearSegmentedColormap.from_list('', [white, cmap[i]]))

    ax.set_title('Merged')

    plt.show()





.. image-sg:: /auto_examples/images/sphx_glr_plot_i_package_overview_023.png
   :alt: Merged
   :srcset: /auto_examples/images/sphx_glr_plot_i_package_overview_023.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 177-184

References
----------
.. [1] Kallepitis, C., Bergholt, M., Mazo, M. et al. Quantitative volumetric Raman imaging of three dimensional cell cultures. Nat Commun 8, 14843 (2017).

.. [2] Winter ME. N-FINDR: An algorithm for fast autonomous spectral end-member determination in hyperspectral data. InImaging Spectrometry V 1999 Oct 27 (Vol. 3753, pp. 266-275). SPIE.

.. [3] Heinz DC. Fully constrained least squares linear spectral mixture analysis method for material quantification in hyperspectral imagery. IEEE transactions on geoscience and remote sensing. 2001 Mar;39(3):529-45.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  51.544 seconds)


.. _sphx_glr_download_auto_examples_plot_i_package_overview.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_i_package_overview.py <plot_i_package_overview.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_i_package_overview.ipynb <plot_i_package_overview.ipynb>`
